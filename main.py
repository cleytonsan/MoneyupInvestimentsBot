from dotenv import load_dotenv
load_dotenv()
import discord
from discord.ext import commands
import google.generativeai as genai
import os
import asyncio
import aiohttp
import pandas as pd
import matplotlib.pyplot as plt
import io
import re
from alpha_vantage.timeseries import TimeSeries

# --- Configura√ß√µes Iniciais ---

DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
ALPHA_VANTAGE_API_KEY = os.getenv('ALPHA_VANTAGE_API_KEY')

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

user_session_data = {}


# --- Fun√ß√µes Auxiliares (APIs e Gera√ß√£o de Gr√°ficos) ---
async def get_selic_rate():
    try:
        url = "https://api.bcb.gov.br/dados/serie/bcdata.sgs.1178/dados/ultimos/1?formato=json"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        return data[0]['valor']
                return None
    except Exception as e:
        print(f"Erro ao buscar Selic: {e}")
        return None


async def get_ipca_rate():
    try:
        url = "https://api.bcb.gov.br/dados/serie/bcdata.sgs.13522/dados/ultimos/1?formato=json"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        return data[0]['valor']
                return None
    except Exception as e:
        print(f"Erro ao buscar IPCA: {e}")
        return None


async def get_stock_data(symbol):
    if not ALPHA_VANTAGE_API_KEY:
        print("ALPHA_VANTAGE_API_KEY n√£o configurada.")
        return None

    try:
        ts = TimeSeries(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')
        data, meta_data = await asyncio.to_thread(ts.get_daily,
                                                  symbol=symbol,
                                                  outputsize='compact')
        data.columns = [col.split('. ')[1] for col in data.columns]
        data.index = pd.to_datetime(data.index)
        data = data.sort_index()
        return data['4. close']
    except Exception as e:
        print(f"Erro ao buscar dados da a√ß√£o {symbol} na Alpha Vantage: {e}")
        return None


async def generate_line_chart(data_series,
                              title="Gr√°fico de Pre√ßo",
                              ylabel="Pre√ßo (R$)"):
    if data_series is None or data_series.empty:
        return None

    plt.style.use('dark_background')
    plt.figure(figsize=(12, 6))
    data_series.plot(kind='line', color='cyan', marker='o', markersize=2)
    plt.xlabel("Data", color='white')
    plt.ylabel(ylabel, color='white')
    plt.title(title, color='white')
    plt.xticks(rotation=45, ha='right', color='white')
    plt.yticks(color='white')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', transparent=True)
    buf.seek(0)
    plt.close()
    return discord.File(buf, filename="price_chart.png")


async def generate_pie_chart(allocations,
                             title="Sugest√£o de Aloca√ß√£o da Carteira"):
    if not allocations:
        return None

    labels = [f"{k} ({v:.1f}%)" for k, v in allocations.items()]
    sizes = list(allocations.values())
    colors = plt.cm.Paired(range(len(labels)))

    plt.style.use('dark_background')
    plt.figure(figsize=(10, 8))
    plt.pie(sizes,
            labels=labels,
            colors=colors,
            autopct='',
            startangle=90,
            wedgeprops={'edgecolor': 'white'})
    plt.axis('equal')
    plt.title(title, color='white')

    buf = io.BytesIO()
    plt.savefig(buf, format='png', transparent=True)
    buf.seek(0)
    plt.close()
    return discord.File(buf, filename="allocation_chart.png")


def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


# Fun√ß√£o para dividir mensagens longas corretamente no Discord
async def send_long_message(ctx, message_content):
    max_len = 2000  # Corrigido: limite real do Discord
    if len(message_content) <= max_len:
        await ctx.send(message_content)
    else:
        parts = re.split(r'(\n---|\n## |\n### |\n#### )', message_content)
        current_part = ""
        for i, part in enumerate(parts):
            if len(current_part) + len(part) < max_len:
                current_part += part
            else:
                if current_part.strip():
                    await ctx.send(current_part.strip())
                current_part = part
        if current_part.strip():
            await ctx.send(current_part.strip())


# --- Eventos do Bot Discord ---


@bot.event
async def on_ready():
    print(f'{bot.user.name} est√° online!')
    print('---')


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send(
            "Comando n√£o encontrado. Use `!ajuda` para ver os comandos dispon√≠veis."
        )
    else:
        print(f"Erro no comando: {error}")
        await ctx.send(f"Ocorreu um erro ao executar o comando: `{error}`")


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    msg_content = message.content.lower()

    if "ol√°" in msg_content or "oi" in msg_content or "ola" in msg_content:
        if not msg_content.startswith(bot.command_prefix):
            await message.channel.send(
                f"Ol√°, {message.author.mention}! Sou o MoneyupInvestiments. Como posso ajudar voc√™ hoje com seus investimentos?"
            )

    if "investimento de hoje" in msg_content or "o que temos para investir" in msg_content:
        if not msg_content.startswith(bot.command_prefix):
            await message.channel.send(
                f"Para uma an√°lise completa e sugest√µes de investimento, por favor, use o comando `!analisar`. Eu farei algumas perguntas para personalizar a an√°lise."
            )

    await bot.process_commands(message)


# --- Comandos do Bot ---
@bot.command(name='analisar', help='Inicia uma an√°lise de mercado e sugest√µes de investimento.')
async def analyze_investment(ctx):
    user_id = ctx.author.id
    user_session_data[user_id] = {}

    await ctx.send("Ol√°! Sou o MoneyupInvestiments. Vamos iniciar sua an√°lise de investimento para este m√™s.")

    # üöÄ Novo passo: perguntar o perfil de investidor
    await ctx.send("Qual √© o seu perfil de investidor? (Conservador, Moderado ou Agressivo)")
    try:
        profile_msg = await bot.wait_for(
            'message',
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['conservador', 'moderado', 'agressivo'],
            timeout=60.0
        )
        profile = profile_msg.content.lower()
        user_session_data[user_id]['profile'] = profile
        await ctx.send(f"Perfil '{profile.title()}' definido. A an√°lise ser√° ajustada com base nisso.")
    except asyncio.TimeoutError:
        await ctx.send("Tempo esgotado. Considerarei o perfil 'Moderado' como padr√£o.")
        user_session_data[user_id]['profile'] = 'moderado'

    await ctx.send("Qual o **valor total que voc√™ pretende investir este m√™s**? (Somente o n√∫mero, ex: `1000`)")
    try:
        investment_value_msg = await bot.wait_for(
            'message',
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel and is_float(m.content),
            timeout=60.0
        )
        user_session_data[user_id]['investment_value'] = float(investment_value_msg.content)
        await ctx.send(f"Ok, voc√™ pretende investir R$ {user_session_data[user_id]['investment_value']:,.2f}.")
    except asyncio.TimeoutError:
        await ctx.send("Tempo esgotado. Por favor, tente `!analisar` novamente.")
        del user_session_data[user_id]
        return

    # Busca Selic
    current_selic = await get_selic_rate()
    if not current_selic:
        await ctx.send("N√£o consegui buscar a **taxa Selic**. Por favor, informe (ex: `10.75`):")
        try:
            selic_msg = await bot.wait_for(
                'message',
                check=lambda m: m.author == ctx.author and m.channel == ctx.channel and is_float(m.content),
                timeout=60.0
            )
            user_session_data[user_id]['selic'] = float(selic_msg.content)
        except:
            user_session_data[user_id]['selic'] = None
    else:
        user_session_data[user_id]['selic'] = current_selic
        await ctx.send(f"A taxa Selic atual (via API) √©: **{current_selic}%**.")

    # Busca IPCA
    current_ipca = await get_ipca_rate()
    if not current_ipca:
        await ctx.send("N√£o consegui buscar o **IPCA**. Por favor, informe (ex: `0.5`):")
        try:
            ipca_msg = await bot.wait_for(
                'message',
                check=lambda m: m.author == ctx.author and m.channel == ctx.channel and is_float(m.content),
                timeout=60.0
            )
            user_session_data[user_id]['ipca'] = float(ipca_msg.content)
        except:
            user_session_data[user_id]['ipca'] = None
    else:
        user_session_data[user_id]['ipca'] = current_ipca
        await ctx.send(f"A taxa IPCA atual (via API) √©: **{current_ipca}%**.")

 

    # üìä Perfis descritivos
    profile_description = {
        'conservador': 'baixa toler√¢ncia a risco, foco em seguran√ßa e liquidez, prioriza renda fixa e prote√ß√£o do capital.',
        'moderado': 'equil√≠brio entre seguran√ßa e rentabilidade, aceita riscos controlados e preza por diversifica√ß√£o.',
        'agressivo': 'alta toler√¢ncia a risco, busca rentabilidade elevada com exposi√ß√£o a renda vari√°vel e ativos vol√°teis.'
    }

    investment_value = user_session_data[user_id]['investment_value']
    selic_info = f"{user_session_data[user_id]['selic']}%" if user_session_data[user_id]['selic'] else "N√£o informada"
    ipca_info = f"{user_session_data[user_id]['ipca']}%" if user_session_data[user_id]['ipca'] else "N√£o informada"
    perception = user_session_data[user_id]['market_perception']
    profile_key = user_session_data[user_id]['profile']

    # üß† Prompt para Gemini (adaptado)
    prompt = f"""
Voc√™ √© um consultor financeiro chamado MoneyupInvestiments, especializado em perfis de risco. Um usu√°rio respondeu √†s perguntas e voc√™ deve gerar uma an√°lise personalizada.

üìå **Informa√ß√µes:**
- Perfil de investidor: {profile_key.title()} ‚Äî {profile_description[profile_key]}
- Valor a investir: R$ {investment_value:,.2f}
- Taxa Selic: {selic_info}
- IPCA: {ipca_info}
- Percep√ß√£o do mercado: {perception}

üìà Gere:
1. Um resumo do cen√°rio atual.
2. Uma sugest√£o de aloca√ß√£o de carteira, com percentuais e ativos por tipo (ex: Tesouro, CDB, a√ß√µes, FIIs, cripto).
3. Justificativas para cada aloca√ß√£o com base no perfil.
"""

    await ctx.send("Processando sua an√°lise... Isso pode levar alguns segundos.")

    try:
        response = await asyncio.to_thread(model.generate_content, prompt)
        analysis_text = response.text
        await send_long_message(ctx, analysis_text)
    except Exception as e:
        await ctx.send(f"Erro ao gerar a an√°lise: {e}")

@bot.command(name='ajuda',
             help='Mostra os comandos dispon√≠veis do MoneyupInvestiments.')
async def help_command(ctx):
    embed = discord.Embed(
        title="Bem-vindo ao MoneyupInvestiments! üí∞",
        description=
        "Sou seu instrutor pessoal para te ajudar a entender e navegar no mundo dos investimentos. Aqui est√£o os comandos que voc√™ pode usar:",
        color=discord.Color.gold())
    embed.add_field(
        name="`!analisar`",
        value=
        "Pe√ßa uma an√°lise de mercado e sugest√µes de investimento espec√≠ficas.",
        inline=False)
    embed.add_field(
        name="`!conceito [termo]`",
        value=
        "Obtenha uma explica√ß√£o detalhada sobre Tesouro Direto, CDB, LCI, LCA, A√ß√µes, Fundos de Investimento ou Criptomoedas.",
        inline=False)
    embed.add_field(
        name="`!grafico_acao [simbolo]`",
        value=
        "Gera um gr√°fico hist√≥rico de pre√ßo para um s√≠mbolo de a√ß√£o (ex: `!grafico_acao IBM`).",
        inline=False)
    embed.add_field(
        name="`!limpar_dados`",
        value=
        "Limpa os dados da sua sess√£o atual (√∫til se quiser recome√ßar uma an√°lise).",
        inline=False)
    embed.add_field(name="`!ajuda`",
                    value="Mostra esta mensagem de ajuda.",
                    inline=False)
    embed.add_field(
        name="Intera√ß√µes Naturais (sem `!`):",
        value=
        "Voc√™ tamb√©m pode tentar dizer:\n- `Ol√°` ou `Oi`\n- `Qual o investimento de hoje`\n- `O que temos para investir`\nPara uma conversa inicial e dicas.",
        inline=False)
    embed.set_footer(
        text=
        "Lembre-se: As sugest√µes s√£o baseadas nas informa√ß√µes dispon√≠veis e em modelos de IA. As decis√µes finais s√£o suas!"
    )
    await ctx.send(embed=embed)


@bot.command(name='limpar_dados', help='Limpa os dados da sua sess√£o atual.')
async def clear_data(ctx):
    user_id = ctx.author.id
    if user_id in user_session_data:
        del user_session_data[user_id]
        await ctx.send(
            "Seus dados de sess√£o foram limpos. Voc√™ pode iniciar uma nova an√°lise com `!analisar`."
        )
    else:
        await ctx.send("N√£o h√° dados de sess√£o para limpar.")


@bot.command(name='conceito',
             help='Explica um tipo de investimento (ex: !conceito A√ß√µes).')
async def concept(ctx, *, investment_type: str):
    investment_type = investment_type.lower().strip()
    concepts = {
        "tesouro direto":
        """**Tesouro Direto**: S√£o t√≠tulos p√∫blicos federais federais emitidos pelo Tesouro Nacional para financiar as atividades do governo. √â considerado um dos investimentos mais seguros do Brasil. Existem diferentes tipos:
        - **Tesouro Selic**: Rendimento atrelado √† taxa Selic, ideal para reserva de emerg√™ncia.
        - **Tesouro Prefixado**: Rentabilidade definida no momento da compra.
        - **Tesouro IPCA+**: Rentabilidade atrelada √† infla√ß√£o (IPCA) mais uma taxa fixa.
        """,
        "cdb":
        """**CDB (Certificado de Dep√≥sito Banc√°rio)**: T√≠tulo de renda fixa emitido por bancos para captar recursos. √â como um "empr√©stimo" que voc√™ faz ao banco. Geralmente coberto pelo FGC (Fundo Garantidor de Cr√©ditos) at√© R$ 250 mil por CPF/CNPJ por institui√ß√£o financeira. Pode ter rendimento prefixado, p√≥s-fixado (atrelado ao CDI) ou h√≠brido.
        """,
        "lci":
        """**LCI (Letra de Cr√©dito Imobili√°rio)**: T√≠tulo de renda fixa emitido por bancos para financiar o setor imobili√°rio. Uma grande vantagem √© que o rendimento da LCI √© **isento de Imposto de Renda** para pessoa f√≠sica. Tamb√©m √© coberta pelo FGC.
        """,
        "lca":
        """**LCA (Letra de Cr√©dito do Agroneg√≥cio)**: Similar √† LCI, mas os recursos s√£o destinados a financiar o setor do agroneg√≥cio. Assim como a LCI, o rendimento da LCA √© **isento de Imposto de Renda** para pessoa f√≠sica e √© coberta pelo FGC.
        """,
        "a√ß√µes":
        """**A√ß√µes**: Representam a menor parte do capital social de uma empresa. Ao comprar uma a√ß√£o, voc√™ se torna s√≥cio da empresa e pode ganhar com a valoriza√ß√£o do pre√ßo da a√ß√£o ou com o recebimento de dividendos (parte do lucro da empresa). Envolve maior risco e volatilidade.
        """,
        "fundos de investimento":
        """**Fundos de Investimento**: S√£o ve√≠culos financeiros coletivos onde diversos investidores aplicam seu dinheiro, que √© gerido por um profissional (gestor do fundo). Existem v√°rios tipos:
        - **Fundos de Renda Fixa**: Investem predominantemente em t√≠tulos de renda fixa.
        - **Fundos Multimercado**: Podem investir em diversas classes de ativos (renda fixa, a√ß√µes, c√¢mbio, etc.), com mais flexibilidade.
        - **Fundos de A√ß√µes**: Investem a maior parte de seus recursos em a√ß√µes.
        - **Fundos Imobili√°rios (FIIs)**: Investem em empreendimentos imobili√°rios (shoppings, escrit√≥rios, galp√µes log√≠sticos), pagando rendimentos peri√≥dicos aos cotistas (geralmente isentos de IR).
        """,
        "criptomoedas":
        """**Criptomoedas**: S√£o moedas digitais descentralizadas que utilizam criptografia para garantir a seguran√ßa das transa√ß√µes e controlar a cria√ß√£o de novas unidades. As mais conhecidas s√£o Bitcoin e Ethereum. S√£o extremamente vol√°teis e n√£o possuem regulamenta√ß√£o completa em muitos pa√≠ses, o que as torna um investimento de alt√≠ssimo risco.
        """
    }

    if investment_type in concepts:
        await ctx.send(concepts[investment_type])
    else:
        await ctx.send(
            f"Desculpe, n√£o encontrei informa√ß√µes sobre '{investment_type}'. Tente um dos seguintes: Tesouro Direto, CDB, LCI, LCA, A√ß√µes, Fundos de Investimento ou Criptomoedas."
        )


@bot.command(
    name='grafico_acao',
    help=
    'Gera um gr√°fico hist√≥rico de pre√ßo para um s√≠mbolo de a√ß√£o (ex: !grafico_acao IBM).'
)
async def stock_chart(ctx, symbol: str):
    await ctx.send(
        f"Buscando dados hist√≥ricos para **{symbol.upper()}**... Isso pode levar um momento."
    )
    stock_data = await get_stock_data(symbol.upper())

    if stock_data is not None and not stock_data.empty:
        chart_file = await generate_line_chart(
            stock_data, title=f"Pre√ßo de Fechamento de {symbol.upper()}")
        if chart_file:
            await ctx.send(file=chart_file)
        else:
            await ctx.send(
                f"N√£o foi poss√≠vel gerar o gr√°fico para {symbol.upper()}.")
    else:
        await ctx.send(
            f"N√£o foi poss√≠vel obter dados para o s√≠mbolo **{symbol.upper()}**. Verifique se o s√≠mbolo est√° correto (ex: `IBM` para a√ß√µes americanas, ou pode ser necess√°rio adicionar `.SA` para brasileiras, como `PETR4.SA` se sua chave da Alpha Vantage suportar) ou se h√° um problema com a API."
        )
        await ctx.send(
            "Lembre-se que a API gratuita da Alpha Vantage tem limites de requisi√ß√£o (5 requisi√ß√µes por minuto, 500 por dia) e pode focar mais em mercados globais (EUA)."
        )


# --- Executar o Bot ---
if __name__ == "__main__":
    if not DISCORD_BOT_TOKEN:
        print(
            "Erro: DISCORD_BOT_TOKEN n√£o encontrado. Certifique-se de adicion√°-lo nas Secrets do Replit."
        )
    elif not GEMINI_API_KEY:
        print(
            "Erro: GEMINI_API_KEY n√£o encontrado. Certifique-se de adicion√°-lo nas Secrets do Replit."
        )
    elif not ALPHA_VANTAGE_API_KEY:
        print(
            "Erro: ALPHA_VANTAGE_API_KEY n√£o encontrado. Certifique-se de adicion√°-lo nas Secrets do Replit."
        )
    else:
        bot.run(DISCORD_BOT_TOKEN)
        
